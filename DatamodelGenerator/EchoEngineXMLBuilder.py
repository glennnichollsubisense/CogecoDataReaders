
import XLSToSWFieldManager
import XLSToSWUnitTestGenerator
import XLSToSWField
import xml.etree.ElementTree as ET
import datetime
import re

class EchoEngineXMLBuilder():


    s_base_folder='C:/Users/Glenn Nicholls/Documents/CenturyLink/CLink model builder/'
    
    def __init__(self):
        xxx=000

    def _commentStringforXMLTags (self):
        return 'AutoGenerated from CLinkXLSToSW-' + repr(datetime.date.today().isoformat())

    def _addMappedFieldsToEngine (self, pSourceTableName, pGISTableName, pFieldManager):
        # Find all the occasions where source table called pSourceTableName
        # maps to the gis table called pGISTableName
        # returns a list of elements to make the field mappings, each one like this
        #     <def "to"="from">
        
        import xml.etree.ElementTree as ELEMENTTREE
        
        lMappedFields = pFieldManager.findMappingsFromSourceTable(pSourceTableName)
        lMappings=ELEMENTTREE.Element('parameter')
        lMappings.set('name', 'field_mappings')
        for i in lMappedFields:
            if i.className()==pGISTableName:
                lElt = ELEMENTTREE.Element('def')
                lElt.set(i.fieldName(), i.fieldFromField().lower())
                lMappings.append(lElt)

        return lMappings



    def _addDefaultValuesToEngine (self, lSourceTableName, lGISTableName, pFieldManager, pExtraDefaultValues):
        # Find all the occasions where source table called pSourceTableName
        # maps to the gis table called pGISTableName
        # returns a list of elements that define the default values, each one like this
        #     <def name=default value>

        import xml.etree.ElementTree as ELEMENTTREE
        
        lMappedFields = pFieldManager.findMappingsFromSourceTable(lSourceTableName)
        lDefaultValues=''
        if pExtraDefaultValues=='':
            lDefaultValues=ELEMENTTREE.Element('parameter')            
            lDefaultValues.set('name', 'default_values')
        else:
            lDefaultValues=ELEMENTTREE.fromstring(pExtraDefaultValues)
            
        for i in lMappedFields:
            if i.className()==lGISTableName:
                if i.fieldDefaultValue()!='':                        
                    lElt = ELEMENTTREE.Element('def')
                    lElt.set(i.fieldName(), i.fieldDefaultValue())
                    lDefaultValues.append(lElt)

        return lDefaultValues

        
    def _addMappingTagsToEngine(self, pEngine, pFieldManager, pExtraDefaultValues, pExtraParameters):

        import xml.etree.ElementTree as ELEMENTTREE
        
        lGISTable='not set'
        lSourceTable='not set'
        for iparameters in pEngine.findall('parameters'):
            for iparameter in iparameters.findall('parameter'):
                if iparameter.attrib['name']=='target_collection':
                    lGISTable=re.sub('gis.', '', iparameter.attrib['value'])
                if iparameter.attrib['name']=='source':
                    for idef in iparameter.findall('def'):
                        lSourceTable=idef.attrib['collection']

            lMappings = self._addMappedFieldsToEngine (lSourceTable, lGISTable, pFieldManager)
            iparameters.append(lMappings)

            lDefaultValues=self._addDefaultValuesToEngine (lSourceTable, lGISTable, pFieldManager, pExtraDefaultValues)
            iparameters.append(lDefaultValues)
            if pExtraParameters!='':
                print (pExtraParameters)
                iparameters.append(ELEMENTTREE.fromstring(pExtraParameters))
                ELEMENTTREE.dump(ELEMENTTREE.fromstring(pExtraParameters))
                

        # ELEMENTTREE.dump(pEngine)
                


    def _addEngine (self, pEngineDef, pFieldManager):

        import xml.etree.ElementTree as ELEMENTTREE

        lsource = ELEMENTTREE.Element('def')
        lsource.set('collection', pEngineDef['sourcetablename'])
        lsource.set('ds', pEngineDef['ds'])
        lsource.set('structure_type', pEngineDef['structure_type'])
        
        lParameterSourceDS = ELEMENTTREE.Element('parameter')
        lParameterSourceDS.set ('name', 'source')
        lParameterSourceDS.append(lsource)
        
        lParameterTargetDS = ELEMENTTREE.Element('parameter')
        lParameterTargetDS.set ('name', 'target_collection')
        lParameterTargetDS.set ('value', pEngineDef['targettablename'])
        
        lParameters = ELEMENTTREE.Element('parameters')
        lParameters.append(lParameterSourceDS)        
        lParameters.append(lParameterTargetDS)
        
        lEngine = ELEMENTTREE.Element('engine')
        lEngine.set('class_name', pEngineDef['class_name'])
        lEngine.set('code', pEngineDef['code'])
        lEngine.set('name', pEngineDef['name'])        
        lEngine.set('pre_engine', pEngineDef['pre_engine'])

        lEngine.append(lParameters)
        self._addMappingTagsToEngine(lEngine, pFieldManager, pEngineDef['extra_defaults'], pEngineDef['extra_parameters'])

        return lEngine
        
        

    def _addEngines (self, pEngines, pFieldManager, pEngineDefs):
        lEngines = pEngines
        for iEngineDef in pEngineDefs:
            lEngines.append(self._addEngine(iEngineDef, pFieldManager))

        return lEngines


    def updateMigrationXML(self, pfieldManager, pEngineDefs):

        import xml.etree.ElementTree as ELEMENTTREE
        
        lEngines = ELEMENTTREE.Element('engines')
        lEngines.set('comment', self._commentStringforXMLTags())
        lEngines.set('title', 'Input to PNI (Scratch Engines)')
        
        lEngines = self._addEngines(lEngines, pfieldManager, pEngineDefs)
        lXML = ELEMENTTREE.Element('xml')
        lXML.append (lEngines)
        lTree = ELEMENTTREE.ElementTree(lXML)
        lTree.write (self.s_base_folder + 'modified runner_config.xml')

        
        
    
if __name__== "__main__":

    lBuilder = EchoEngineXMLBuilder()
    print ("done")
